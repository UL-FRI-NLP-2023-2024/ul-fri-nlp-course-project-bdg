[
  {
    "message": "Pozdravljeni,  Že en čas srfam pa ne najdem ničesar (za razumno ceno). Iščem električno (220V) stikalo s posamičnim nadzorom vsaj štirih vtičnic, ki zmorejo vsaka 10-16A, in se ga lahko daljinsko nadzira preko etherneta/IP (RJ45, ne wifi). Priklop je lahko eno ali trofazni (32A). Kakšne ideje? ",
    "user": "Torx"
  },
  {
    "message": "DIY ",
    "user": "Ishmael"
  },
  {
    "message": "Išči switched PDU.  Težava je, da je to namenjeno za IT in je cena temu primerna. Za 3F izvedbo, ali večji tok boš moral dodati kontaktorje.  Za samogradnjo, poglej: Tux Graphics Kodo bo potrebno popraviti za več kanalov. Druga varianta je arduino ploščica + ENC28j60 shield, ali arduino ethernet shield in relay shied.  Tretja varianta je Raspberry PI z ethernet vmesnikom in arduino relay shield. Še ena možnost je uporaba krmilnika (PLC) z ethernet vmesnikom + releji. Šlo bi tudi s predelavo kakšnega routerja .   Če preklopna zmogljivost relejev ni dovolj, ali rabiš preklop 3f porabnika je potrebno dodat še ustrezen kontaktor. ",
    "user": "int47"
  },
  {
    "message": "Kar ti srce poželi: control anything Lp,  Peter ",
    "user": "twom"
  },
  {
    "message": "Bolj 230 V usmerjeni (imaš US in EU modele) synaccess ",
    "user": "twom"
  },
  {
    "message": "DIY, kupiš 4-kanalni rele za par EUR, potem pa lahko vzameš OrangePi Zero za ~6 EUR in gor postaviš web server preko katerega krmiliš zadevo. Preko crona pa lahko časovno krmiliš vse skupaj.  Tako reč sem si jaz naredil in sicer za dve vtičnici, edino omejitev ima 10A. Stal je pa rele okrog 1 EUR. Pa še tole, za malo več kot 10 EUR dobiš pa že 4-kanalni rele z vgrajenim Bluetoothom in v ohišju.  ",
    "user": "poweroff"
  },
  {
    "message": "Kakor sem razumel, OP išče remote IN fizično kontrolo. Npr remote zase, stikalo za ženo. ",
    "user": "joze67"
  },
  {
    "message": "Ja pa saj to ni problem narediti. Uporabiš križno stikalo pa rele na eni strani in je stvar rešena. ",
    "user": "poweroff"
  },
  {
    "message": "Dodatno tipko na Arduino, pa ima tudi na webu indikacijo, če je prižgano ali ne. ",
    "user": "errhec"
  },
  {
    "message": "Ali pa to, ja. V bistvu lahko uporabiš navadno stikalo (ali pa tipko stikalo), pa en pull up upora daš (10k recimo) in je stvar rešena. Pa to daš kar na OrangePi, da imaš eno samo napravo, ne dveh. Edino na Zero je treba nalotati pine... V resnici pol ure dela. ",
    "user": "poweroff"
  },
  {
    "message": "Hvala za predloge. Bo DIY še najbolj smiselna. Trenutno imam zadeve rešene z d-link WiFi stikali, saj še kar solidno delujejo, imajo pa par \"hib\"- ena je, da po izpadu napajanja ne ohranijo predhodnega stanja - vedno preklopijo na off, druga težava pa je wifi/povezljivost/dostopnost njihovih strežnikov.. ",
    "user": "Torx"
  },
  {
    "message": "Ja, to je problem, ker ko napajanje izpade, tudi rele \"crkne\". Ampak lahko pa narediš tako, da si zapomniš stanje in ob rebootu nastaviš prejšnje stanje.  Drugače je pa vprašanje kako misliš dostopat do te naprave? Ker če hočeš imeti dostop od zunaj, boš moral na nek način odpreti svoje omrežje v internet. Sam imam rešeno tako, da se mi vse naprave povezujejo na VPN znotraj katerega so na statičnih naslovih (poleg tega pa VPN pushne tudi DNS, kar pomeni, da na telefoni vpišeš samo pec.vpn in dobim podatke iz peči. ",
    "user": "poweroff"
  },
  {
    "message": "Če se boš lotil, je tukajle Python koda, ki jo pa lahko kličeš potem preko web aplikacije. Pa link za shemo pinov je tudi spodaj.   #!/usr/bin/env python\n# Aplication for controlling power with 2-port relay on OrangePi Zero.\n\n# Wiring (OrangePi Zero -- 2-port relay):\n# PIN2 (5V) -- VCC\n# PIN6 (GND) -- GND\n# PIN3 (GPIO PA12) -- IN1\n# PIN5 (GPIO PA11) -- IN2\n#\n# Wiring map: http://codelectron.com/blink-leds-using-orange-pi-zero-gpio-and-python/\n\nimport os\nimport sys\n\nfrom time import sleep\nfrom pyA20.gpio import gpio\nfrom pyA20.gpio import port\n\n# Check if app is run as root.\nif not os.getegid() == 0:\n    sys.exit('Application must be run with admin privileges, for example: \"sudo ' + os.path.basename(__file__) + '\".')\n\n# Check if app has two parameters.\nif not len(sys.argv) == 3:\n    sys.stderr.write('Application must be called with parameter specifying ID of a relay and state (on/off).\\n')\n    sys.stderr.write('For example: \"sudo relay.py 1 on\" for opening relay 1.\\n')\n    sys.exit()\n\n\n# Check if first parameter is a number between 1 and 2 and set relay mumber (IN1 or IN2).\nif str.isdigit(sys.argv[1]):\n    if sys.argv[1] == '1':\n        switch = port.PA12\n    elif sys.argv[1] == '2':\n        switch = port.PA11\n    else:\n        sys.stderr.write('Relay ID must 1 on 2.\\n')\n        sys.exit() \nelse:\n    sys.stderr.write('Relay ID must be a number.\\n')\n    sys.exit() \n\n# Check if second parameter is either 'on' or 'off and set switch_state.\nif sys.argv[2] == 'on':\n    switch_state = 0\nelif sys.argv[2] == 'off':\n    switch_state = 1\nelse:\n    sys.stderr.write('Relay state could be either \"on\" or \"off\".\\n')\n    sys.exit() \n\n# Now proceeed...\ngpio.init()\ngpio.setcfg(switch, gpio.OUTPUT)\ngpio.output(switch, switch_state)\n\nsys.exit() ",
    "user": "poweroff"
  },
  {
    "message": "Imam ovpn tunel med oddaljeno lokacijo in domačim omrežjem, tako da v principu bo dostop preko lokalne mreže.. ",
    "user": "Torx"
  }
]