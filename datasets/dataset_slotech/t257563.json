[
  {
    "message": "Živjo,  Bom na primeru razložil... Imam razred, ki kopira datoteko.... In rad bi da bi lahko prikazoval napredek koliko datoteke je že prekopirane... Torej rabim nekakšen dogodek \"OnProgress\" ali kaj podobnega... Samo kako to narediti v standardnem c++-u... na najbolj eleganten način...  Mogoče bi naredil kaj podobnega kot v wxWidgets... seveda še nimam pojma kako, tole so najbrž nekakšni makroji...  BEGIN_EVENT_TABLE(MyFrame, wxFrame) EVT_MENU (wxID_EXIT, MyFrame::OnExit) EVT_MENU (DO_TEST, MyFrame::DoTest) EVT_SIZE ( MyFrame::OnSize) EVT_BUTTON (BUTTON1, MyFrame::OnButton1) END_EVENT_TABLE()  Če imate kakšen predlog bi bil zelo vesel...  Hvala za odgovore ",
    "user": "zhigatsey"
  },
  {
    "message": "Multithreading... Narediš thread ki kopira in povečuje en števec (progress), in potem iz glavnega threada ta števec bereš. ",
    "user": "Senitel"
  },
  {
    "message": "Poleg multithreadinga lahko uporabiš še rešitev s callbacki. Če si v C++ svetu, svetujem  libsigc++. ",
    "user": "Jean-Paul"
  },
  {
    "message": "Najprej hvala za predlog si bom ogledal , čeprav bi rad to naredil brez zunanjih knjižnjic... V mislih sem imel kakšno rešitev s kazalci na funkcije... Moram še malo pogledati vso zadevo... V glavnem čimbolj simple, elegantno in pregledno... ",
    "user": "zhigatsey"
  },
  {
    "message": "Odvisno kakšna je sploh aplikacija...Windows, wxWidgets, SDL, Qt, karkoli? Tam imaš najbrž nek event loop in sprogramiraš da iz razreda prebere trenutno pozicijo ali pa da razred tja pošilja evente... ",
    "user": "SasoS"
  },
  {
    "message": "Aplikacija je napisana v standardnem c++-u.... Za primer sem dal razred za kopiranje datoteke,  v katerem se proži event v katerem bi recimo prikazoval napredek kopiranja datoteke...  V mislih sem imel podobno zgradbo kot pri delphiju...   // Pišem na pamet, samo za primer\n\n// ko narediš tip dogodka, ki je v bistvu kazalec na funkcijo\ntype TProgressEvent = procedure (Sender: TObject; Progress: Integer) of object;\n\nin potem v razredu narediš takole\n\n// deklaracija razreda\nTCopyFile = class\nprivate\n  FOnProgress: TProgressEvent; // deklariramo privatno spremenljivko tipa TProgressEvent\npublic\n  procedure Copy(Source: string; Dest: string);\n  property OnProgress: TProgressEvent read FOnProgress write FOnProgress;\nend;\n//-------------------\nprocedure TCopyFile.Copy(Source: string; Dest: string);\nvar\n  Progress: Integer;\nbegin\n  // V tej metodi se datoteka kopira po delih (iz enega src bufferja v dest buffer, in nekako izračunaš procent in sprožiš event)\n  Progress := 45; // samo za primer kakor da je prekošpirane že 45% datoteke\n\n  // Tukaj prožimo event\n  if Assigned(FOnProgres) then\n    FOnProgress(Self, Progress);\nend;\n  // Zdaj pa še kako bi vse skupaj uporabil   \n// Najprej napišemo proceduro (Nekje v glavnem programu), katero bo razred klical -> to je malo bolj okorno razloženo:)\nprocedure CopyFileProgress(Sender: TObject; Progress: Integer);\nbegin\n  //Prikaži progress v text boxu naprimer\n  Edit1.Text := IntToStr(Progress);\nend;\n\n//-------------------------------------\n\nwith TCopyFile.Create do\ntry\n  OnProgress := CopyFileProgress; // Tukaj določimo naj kazalec kaže na funkcijo CopyFileProgress\n  Copy(src, dest);\nfinally\n  Free;\nend;\n  Seveda mislim da se da to na podoben način narediti tudi v standardnem c++-u... Zdajle ne vidim razloga zakaj ne... To bi bila meni najlažja varianta... Sem pa gledal tudi kako narediš kao statične evente brez pointerjev na funkcije to je pa na telje strani razloženo  tukajle, samo se moram še odločiti kako pa kaj... Ne vem pa še dobro kako delujejo -> jaz jih bom poimenoval \"event maps\", tako je narejeno v mfc ali pa v wxWidgets.... in če kaj podobnega pride v poštev....   In pa to delam ljubiteljsko za razširitev svojega znanja...  Hvala za odgovore ",
    "user": "zhigatsey"
  },
  {
    "message": "Jah to lahko narediš na enak način:   // Deklariraš tip pointerja na proceduro\ntypedef void (*CopyFileProgress)(int);\n\n// Ena izmed možnh procedur\nvoid CopyFile(int progress)\n{\n    nekmeni.SetText(progress);\n}\n\nclass Copy\n{\nprivate:\n    CopyFileProgress myproc;\n    // Copy metoda\n    CopyData()\n    {\n        ...\n        if(myproc)\n            myproc(progress);\n        ...\n     }\npublic:\n    // Initializiraj myproc na NULL v konstruktorju\n    Copy():myproc(NULL) { }\n    // Metoda za določanje procedure\n   SetProc(CopyFileProgress proc):myproc(proc) { }\n};\n\nint main()\n{\n    Copy *copy = new Copy;\n    copy->SetProc(CopyFile);\n    copy->CopyData();\n}\n  Nekaj v tem stilu, zelo nahitro spisano. ",
    "user": "SasoS"
  },
  {
    "message": "Ja tako bi bilo super samo pomoje da ne bo šlo tako zlahka kot sem mislil, sicer nisem ravno siguren, bom sprobal Ker moraš deklarirati function pointer za memberja classa....  nekaj takega brez typedefa void (Copy::*progress)(int);  Samo se pa spet zakomplicira pri dedovanju, ne bom imel za isti event v vsakem podedovanem razredu drug typedef....  Se bo treba pomoje nekaj drugega izmisliti..... ",
    "user": "zhigatsey"
  },
  {
    "message": " class CopyObserver {\n   virtual copyProgress(float progress) = 0;\n};\n\nclass WhereCopyIsUsed {\n   CopyObserver* myObserver;\n\n   void copy() {\n      ...\n      if (myObserver != 0) myObserver->copyProgress(progressState);\n   }\n};\n Izpelješ svoj class iz CopyObserverja in to je to. ",
    "user": "Gundolf"
  },
  {
    "message": "Še en način primeren, če se količkokaj spoznaš na template.  class WhereCopyIsUsed {\npublic:\n   template<class CopyObserver>\n   void copy(CopyObserver& observer) {\n      ...\n      while (copyOneStep) \n         observer.onCopyProgress(copyProgress);\n      ...\n   }\n};\n\n// ko kličeš copy\nclass SomeDialog {\npublic:\n   void onCopyProgress(float progress) {\n      ...\n      // tu pišeš progress v tvoj textbox ali delaš kaj podobnega\n   }\n\n   void copySth() {\n      ...\n      WhereCopyIsUsed myCopyObj;\n      myCopyObj.copy(*this);\n      ...\n   }\n}\n ",
    "user": "Gundolf"
  },
  {
    "message": "Aha hvala samo se mi na prvi pogled zdi da je to bolj rešitev zgolj za ta primer kopiranja datotek... Našel sem pa  tale zanimiv članek, ki si ga bom bolj podrobno prebral doma, najbrž da bo tukaj našel veliko odgovorov na moja vprašanja.... ",
    "user": "zhigatsey"
  },
  {
    "message": "Ja delegati so dobra rešitev. V bistvu podobno mojemu drugemu predlogu, le da je tisti template skrit in da je bolj razširljivo. Če te zanese v to smer imaš za to že pripravljeno knjižnico  Loki. Dokaj enostavna zadeva (nobenega bloata ni), vključuje pa nekaj močnih patternov. Avtor (oz. eden izmed njih) je velika avtoriteta v C++, Andrei Alexandrescu.   V Lokiju se zadeva imenuje Functor. Lahko takoj sprobaš, če je to tista idealna rešitev zate (seveda je bolje, če si prebereš tvoj članek in se še kaj naučiš zraven ;)). Če takole na pamet kodo napišem:  #include <Loki/Functor.h>\n\nclass Krneki {\n   int mojaFunkcija(int a, int b) {return a + b}\n}\n\nKrneki mojObjekt;\nLoki::Functor<int> func(mojObjekt, mojaFunkcija);\ntri = func(1, 2);\n ",
    "user": "Gundolf"
  },
  {
    "message": "Zal manjka en podatek; kateri sistem?  Na windowsih je, za povecevat progres bar, klasicna varianta da nekaj opravljas v locenem threadu, potem pa od tam posiljas podatke kar direktno oknu preko messegov (ki so thread safe). ni pa sploh nujno, da delaš zadevo preko threada, samo se ti nič (razen progress bara) ne bo osveževalo (no ja, tudi to se da postimat samo je bolj preprosto naredit thread).  pseudo, poglej si kaj je pravi message v msdn;  createthread(..., threadfcn, hwnd);  int threadfcn(handle hwnd) { for(i = 0; i++) { sendmessage(hwnd, WM_PROGRESS, i, 0); } } ",
    "user": "yeti"
  }
]