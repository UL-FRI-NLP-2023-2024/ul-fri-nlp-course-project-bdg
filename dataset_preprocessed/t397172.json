[
    {
        "role": "user",
        "message": "OK, tole sem sam spisal za moje potrebe ampak niti slučajno to ni 100% backup, vsaj nekaj podatkov pa tako arhiviram in jih preko FTP (LFTP zaradi stabilnosti povezav) shranjujem na drug server / lokacijo na koncu pa še mail pošlje kaj je naredil. (napisana je v angleščini, ker sem objavil tudi na CentOS forumu)  Zadeva se dogaja dnevno (Cron.daily), izmeri čas ki se porabi za določeno operacijo in avtomatsko naredi FULL Backup v Nedeljo (ostale dni pa inkrementalno glede na Nedeljo) ker je pri meni na serverju takrat najmanj obremenjeno. Tudi pobrišem arhive starejše od XXY dni ki so lokalno narejeni v direktoriju da na samem serverju ne zavzema preveč in se hranijo na FTP lokaciji dalj časa.  Skripta dela z GNU/TAR (ker podpira incremental backup) in TXT seznamom datotek ki jih arhiviram / izločim iz arhiva:  Skripto zaganjam v CRON: PATH=/sbin:/bin:/usr/bin:/usr/sbin:/usr/local/bin 0 1 * * * archive.sh >/dev/null # at 1.00AM every day   Ta archive.sh pa imam v /usr/local/bin , ki je v PATH. #!/bin/bash cd /usr/tmp/server_backup ./backup.sh # the real script to make backup   S tem archive.sh se edino prestavim v direktorij  /usr/tmp/server_backup  kjer se arhiviranje dogaja.   Najprej seznami kaj in kaj ne: including.txt:  /var/\n/etc/\n/home/\n  excluding.txt:  proc\n*_log*\nvar/tmp\nvar/lib/bluetooth\nvar/lib/cs\nvar/lib/dav\nvar/lib/dbus\nvar/lib/dhcpv6\nvar/lib/dovecot\nvar/lib/games\nvar/lib/rpm\nvar/lib/webalizer\nvar/lib/yum\nvar/tmp/arhiv_serverja\nvar/log\nvar/run\nvar/www/manual\nvar/yp\nvar/lib/php/session\nspool\ncache\n*zip\n*gz\netc/rc*\nhome/httpd/manual\nrpm\n   še LFTP skripta: lftpscript.sh  #!/bin/sh\nHOST='ftp.domain.com'\nUSER='ftpuser'\nPASSWD='idontknow'\nFILE=$(cat archivename.txt)\n\nlftp -c \"open $HOST && user $USER $PASSWD && cd FOLDER_NAME_FOR_STORING/backups/ && put $FILE\" <<END_SCRIPT\n# all in one command that connects to HOST=ftp.domain.com with Username/password \n# and changes directory to whatever you need \n# then transfers the file with the name of created archive in archivename.txt (ex. BACKUP-2009-12-15-Fri-01-15-01h.tgz)\nbye\nexit\nEND_SCRIPT\nexit 0\n  no in končno še  backup.sh   #!/bin/sh\n\n# DELETE archive older than -mtime +'days'\nfind . -name 'BACKUP*.tgz' -mtime +20 -delete\nfind . -name 'stopwatch*' -mtime +2 -delete\n\nstart1=$(date +\"%T h   ( %s )\")\nstart=$(date +%s)\n\n# on SUNDAY make FULL backup\nif [ $(date +\"%a\") = \"Sun\" ]; then\n{\nSNAPSHOTFILE=\"./usr-full\";\t\t\t\t# needed by TAR (GNU-TAR to be precise) which is used to compare for incremental backups\nARCHIVENAME=BACKUP-full-$(date +\"%F-%a-%H-%M-%Sh\").tgz;\t\t\t\t\t# self explaining\nrm -f \"./usr-full\";\n}\n\nelse\n{\nARCHIVENAME=BACKUP-$(date +\"%F-%a-%H-%M-%Sh\").tgz;\n# a name of a backup file:  BACKUP-2009-12-15-Fri-01-15-01h.tgz\nSNAPSHOTFILE=\"./usr-1\";\ncp \"./usr-full\" \"./usr-1\";\n}\nfi\n\necho $ARCHIVENAME >archivename.txt\t\t# need the name to FTP transfer so store it in file archivename.txt which doesn't change (used later in lftpscript.sh ) !\n# creating text to send in email\necho \"-----------------------\" >stopwatch-$archivename.txt\necho \"Backup of $ARCHIVENAME\" >>stopwatch-$archivename.txt\necho \"-----------------------\" >>stopwatch-$archivename.txt\necho \" \" >>stopwatch-$archivename.txt              # echo \" \" makes new line /CR or LF whatever it does\n# I do not need this precise time { time tar -T including.txt -X excluding.txt -pczvRf $ARCHIVENAME; } 2>> stopwatch-$ARCHIVENAME.txt >/dev/null\n{ tar -T including.txt -X excluding.txt -pczvR --listed-incremental=$SNAPSHOTFILE  -f $ARCHIVENAME; } 2>> stopwatch-$ARCHIVENAME.txt >/dev/null\n\nstopped1=$(date +\"%T h   ( %s )\")\nstopped=$(date +%s)\nftpstarted=$stopped\n\nthetime=$(($stopped-$start))\t\t\t# doing some math in shell that's why $()\n\necho \" \" >>stopwatch-$ARCHIVENAME.txt\necho -n \"File Size (Byte-s) : \" >>stopwatch-$ARCHIVENAME.txt\nls -al \"$ARCHIVENAME\" | cut -f 5 -d ' ' >>stopwatch-$ARCHIVENAME.txt\n# this part | cut -f 5 -d ' '   is sometimes maybe 6 instead of 5, experiment which gives you only the SIZE of the file\necho \" \" >>stopwatch-$ARCHIVENAME.txt\necho \"Started: \" $start1 >>stopwatch-$ARCHIVENAME.txt\necho \"Stopped: \" $stopped1 >>stopwatch-$ARCHIVENAME.txt\necho \"Time needed: \" $(date -d \"1970-01-01 $thetime sec\" +\"%H:%M:%S\")      /  $thetime \"secs\" >>stopwatch-$ARCHIVENAME.txt\n# outputs: Time needed: 00:03:14 / 194 secs\n\n\necho \"-----------------------\" >>stopwatch-$ARCHIVENAME.txt\necho \" \" >>stopwatch-$ARCHIVENAME.txt\necho \"FTP start:\" >>stopwatch-$ARCHIVENAME.txt\n# again I dont need exact time procedure { time ./lftpscript.sh; } 2>> stopwatch-$ARCHIVENAME.txt\n{ ./lftpscript.sh; } 2>> stopwatch-$ARCHIVENAME.txt\n\nftpstop1=$(date +\"%T h   ( %s )\")\nftpstopped=$(date +%s)\n\nftptime=$(($ftpstopped-$ftpstarted))\n\necho \" \" >>stopwatch-$ARCHIVENAME.txt\necho \"Start of FTP: \" $stopped1 >>stopwatch-$ARCHIVENAME.txt\necho \"End of FTP: \" $ftpstop1 >>stopwatch-$ARCHIVENAME.txt\necho \"Time of FTP transfer: \" $(date -d \"1970-01-01 $ftptime sec\" +\"%H:%M:%S\")     /   $ftptime \"secs\" >>stopwatch-$ARCHIVENAME.txt\n\nmail -s \"Backup of $ARCHIVENAME\" \"email address of recipient\" <stopwatch-$ARCHIVENAME.txt\n#finally email report :-)\n   Tako, upam da je kaj jasno, drugače še kaj obrazložim oziroma dobrodošli komentarji da se kaj popravi ali pa čisto tako če je komu prišlo prav ...  LP"
    },
    {
        "role": "assistant_0",
        "message": "Samo eno vprašanje - kaj ti ni bilo všeč pri rdiff-backup-u? Ker osebno trenutno še uporabljam kar rsync, ampak bom počasi zamenjal, da se zavarujem še pred lastnimi napakami."
    },
    {
        "role": "assistant_1",
        "message": "Moja verzija backupa, ki deluje s pomočjo Duplicity. http://github.com/orkaa/duplicity/blob/..."
    },
    {
        "role": "user",
        "message": "Ja pri RDIFF mi ni ustrezalo da mi kopira strukturo direktorijev in fajlov namesto samo 1 fajla (arhiviranega kakorkoli TAR, ZIP...), pa na BACKUP FTP serverju ni SSH nastavljen za Rsync.  Za Duplicity pa nisem vedel zato pa si bom pogledal kako bi lahko izboljšal, ker piše da kopira samo spremenjen del datotek, ne pa cele datoteke ki se je spremenila (tako dela TAR) Njihov stavek: the incremental archives are space efficient and only record the parts of files that have changed since the last backup  Hvala za info, ob svojem času bom zamenjal na serverju za tale Duplicity da vidim razlike."
    },
    {
        "role": "assistant_1",
        "message": "Za Duplicity pa nisem vedel zato pa si bom pogledal kako bi lahko izboljšal, ker piše da kopira samo spremenjen del datotek, ne pa cele datoteke ki se je spremenila (tako dela TAR)  Zakaj za hudiča bi bilo pa to slabo? :)"
    },
    {
        "role": "user",
        "message": "Ummm, ne ni slabo, to je dobro !  Slabo sem se jaz izrazil..."
    },
    {
        "role": "assistant_2",
        "message": "Duplicity al pa rdiff-backup. Brezveze je vsak dan prenašat miljavžnt giga podatkov naokoli. Pa še ena moja semi grda skripta, ki uporablja rdiff-backup za backup. Za prenos podatkov se uporablja ssh, stvari se pa odlagajo na oddaljen strežnik z navadnim userjem (rdiff-backup si beleži podatke o lastništvu in dovoljenjih nad datotekami, pa zna ob restoru pol vse pravilno nastavit).   #!/bin/bash\n#\n# Wrapper script for performing rdiff-backup based backups. Uses some checks and lock file to be on the safe side.\n#\nHELP=\"\\n rbackup [ run | remold [older than] ] \\n \\n\nUse run for normal backup. \\n\nUse remold to remove older than set in \\$OLDBACKUP variable. You can overwrite default setting \\n\nif you specify second parameter here. See 'man rdiff-backup' --remove-older-than part for details. \\n \\n\n\"\n# Set PYTHONPATH and/or PATH if needed\nexport PYTHONPATH=\"/opt/rdiff-backup-1.1.5/lib/lib.linux-i686-2.4\"\n#export PATH=\"$PATH\"\n# Set some variables regarding backup\nCONFDIR=\"/root/lib\"\nRDIFF=\"/opt/rdiff-backup-1.1.5/bin/rdiff-backup\"\nSOURCE=\"/\"\nDEST=\"192.168.0.1::backup/\"\nLOGFILE=\"$CONFDIR/rdifflog-$(date +%F_%R)\"\nOLDBACKUP=\"3W\"\nINCLUDELIST=\"$CONFDIR/include-filelist\"\nLOCKFILE=\"/tmp/rbackup.lock\"\n\n# Notification variables\nHOSTNAME=`hostname`\nMAILHOST=\"\"\nMAILADDR=\"\"\nMAILFROM=\"\"\n\n# Some initial checking\n\nif [ $EUID != \"0\" ]; then\n\techo \"This requires root privileges.\"\n\texit 1\nfi\n\nif [ ! -x $RDIFF ];\nthen\n    echo \"No rdiff-backup installed in $RDIFF.\"\n    exit 1\nfi\n\nif [ ! -x /usr/bin/nail ]; then\n    echo \"This script requires heirloom-mailx installed for mail proccesing.\"\n    exit 1\nfi\n\nif [ ! -f $INCLUDELIST ];\nthen\n    echo \"No include file found, exiting.\"\n    exit 1\nfi\n\n# Backup related functions\n\nrun_backup() {\n    check_lockfile\n    touch $LOCKFILE\n    $RDIFF --print-statistics --preserve-numerical-ids --include-globbing-filelist $INCLUDELIST $SOURCE $DEST >> $LOGFILE 2>&1\n    RETCODE=\"$?\"\n    if [ ! \"$RETCODE\" == \"0\" ]; then \n        send_mail_error\n        exit 1\n    fi\n    parse_log\n    send_mail\n    rm -f $LOCKFILE\n}\n\nremove_old() {\n    check_lockfile\n    touch $LOCKFILE \n    $RDIFF --remove-older-than $OLDBACKUP --force $DEST >> $LOGFILE 2>&1\n    send_mail_rotate\n    rm -f $LOCKFILE\n}\n\n# Stats collection and notifications\n\nparse_log() {\n    ELT=`egrep -e \"ElapsedTime\" < $LOGFILE`\n    MFS=`egrep -e \"MirrorFileSize\" < $LOGFILE`\n    NFS=`egrep -e \"NewFileSize\" < $LOGFILE`\n    CMS=`egrep -e \"ChangedMirrorSize\" < $LOGFILE`\n    ERR=`egrep -e \"Errors\" < $LOGFILE`\n    rm -f $LOGFILE\n\n}\n\nsend_mail() {\n    echo -e \"\\n$ELT\\n$MFS\\n$NFS\\n$CMS\\n$ERR\\n\" | nail -r $MAILFROM -s \"Backup OK on $HOSTNAME at `date +%R`\"  $MAILADDR\n\n}\n\nsend_mail_error() {\n    echo -e \"rbackup died with exit code $RETCODE, attaching log file\" | nail -r $MAILFROM -s \"Backup ERROR on $HOSTNAME at `date +%R`\" -a $LOGFILE $MAILADDR\n    rm -f $LOGFILE\n}\n\nsend_mail_rotate() {\n    echo -e \"Attached rotate log\" | nail -r $MAILFROM -s \"Older that  $OLDBACKUP removed on $HOSTNAME at `date +%R`\" -a $LOGFILE $MAILADDR\n    rm -f $LOGFILE\n\n}\n\n# Lockfile\n\ncheck_lockfile() {\n    if [ -f $LOCKFILE ]; then\n        echo \"Lockfile found, aborting! Maybe another rbackup process is running?\" >> $LOGFILE\n        RETCODE=\"1\"\n        send_mail_error\n        rm -f $LOGFILE\n        exit 1\n    fi\n\n}\n\n# Command line argumet parsing\n\ncase $1 in\n\"run\")\n    run_backup\n;;\n\n\"remold\")\n    if [ ! $2 ]; then\n        remove_old\n    else\n        OLDBACKUP=\"$2\"\n        remove_old\n    fi \n;;\n\n\"help\")\n    echo -e $HELP\n;;\n\n*)\n    echo \"Use 'rbackup help' to get usage tips\"\n;;\nesac"
    }
]