[
    {
        "role": "user",
        "message": "Torej, vem, da je že bilo teh tem veliko, ampak, a ne bi bilo lepo, če bi bil en topic, v tej zgornji skupini tem (torej vedno na prvi strani), kjer bi bilo razloženo kako se naj nekdo loti začetka učenja, kaj se učiti, nejasni pojmi... Trenutno se namreč ukvarjam z python. Nisem še ravno daleč, ampak me že sedaj zanima, kateri jezik bi naj bil moj naslednji, kako dolgo se naj sploh učim python in nato pričnem z drugim, kateri jeziki so popularni v Sloveniji, s tem mislim, da so zaželjeni, ko iščeš službo. Naslednje me zanima, kakšne so razlike med html, html 4/5, xhtml... Potem me zanima v kakšni navezi sta html in php pri spletnem programiranju, zakaj ne moreš narediti vse z enim, namreč videl sem nek oglas za študentsko delo, kjer iščejo HTML dizajnerja s PHP znanjem. Pa zanima me, če pozna kdo kakšen priročnik/učbenik, ki lepo razloži namen/delovanje baz MySQL..."
    },
    {
        "role": "assistant_0",
        "message": "C# in C++ sta tudi velikokrat zaželjena ^^"
    },
    {
        "role": "assistant_1",
        "message": "Lah probaš http://tryruby.org sicer je za jezik Ruby ampak je fajn nrjeno.  Glede tvojega vprašanja, PHP je programski jazik v katerem programiraš, HTML pa je opisni jezik v katerem samo opisuješ strukturo dokumenta, programirat pa dejansko ne moreš v njem - ne moreš pisat neke logike v HTML. HTML je bistveno lažji kot pa programski jeziki. Za službo je najlažje najt PHP, je pa temu ustrezno tudi manj plačano od kakšnih drugih (večja ponudba, vsak študent zna)."
    },
    {
        "role": "assistant_2",
        "message": "nadaljuj s pythonom, zaenkrat pozabi na karkoli drugega, ker sicer na koncu ne bos znal nic."
    },
    {
        "role": "assistant_3",
        "message": "Ja pa na abakus naj dela."
    },
    {
        "role": "assistant_2",
        "message": "potem pa priporocam takoj c# ali c++ AMP, da bos konkurencen... ne izgubljat casa s hobi jeziki."
    },
    {
        "role": "assistant_1",
        "message": "Ja ker C# in C++ sta res blazno konkurenčna. To pa res noben ne zna, in povpraševanja je res full. No comment."
    },
    {
        "role": "assistant_4",
        "message": "Lej, glede takega učenja programiranja sem vedno \"skeptičen\". Kaj je namen takega učenja? Če maš konkreten projekt v mislih, se loti tega, drugače pa nima glih smisla."
    },
    {
        "role": "assistant_5",
        "message": "Python je v redu. Predvsem je dovolj projektov na katerih se lahko naucis marsikaj novega. Osebno sem na beersprintu v Belgiji. (http://www.coactivate.org/projects/belg... In programiramo za eestec novo spletno stran. Pomagas lahko tudi kiberpipi ( https://github.com/kiberpipa/Intranet ), ki ima spletno stran v Djangu (https://dev.kiberpipa.org/projects/kibe.... Sluzb je kar nekaj (Django).  Splaca se nadaljevat programirat v nekem jeziku potem, ko ratas dober ni nek problem preskociti na kaj drugega npr. Ruby mogoce PHP. Ce se ponudi priloznost ucenja C ali C++ se seveda ucis slednjega. C# mas super paralelizem. PHP je super jezih, vendar je problem slovenskih podjetij, da ga uporabljajo, kot da bi bili leta 2004. Ne pozabit tudi na to, da programiranje ni vse. Dandanes je treba znat uporabljat SVN ali git. V podjetjih v tujini je treba znat pisat teste. Se hitro ucit itd. .  Dosti pomaga (pri iskanju projektov) tudi mocno mrezenje. Torej treba je pit pivo z ljudmi, pisat maile, komunicirat.   Lep pozdrav iz belgije.   :D  Nom nom"
    },
    {
        "role": "assistant_6",
        "message": "Piši propalo press..."
    },
    {
        "role": "assistant_7",
        "message": "http://www.codecademy.com/"
    },
    {
        "role": "assistant_8",
        "message": "Jaz ti priporočam c# ali javo.  Ali pa kot si sam omenil php,html,css,jquery,...  Python je izguba časa. lp"
    },
    {
        "role": "assistant_1",
        "message": "Python uporablja eden največjih slovenskih startupov (Zemanta)... Lahko greš do njih in jim razložiš, zakaj izgubljajo čas. Potem greš lahko še na Google in jim razložiš isto stvar. Ti verjetno bolje veš od njih."
    },
    {
        "role": "assistant_9",
        "message": "python je super za zacetnika, plus odpira ti veliko moznosti v prihodnosti, ko bos programersko ze bolje podkovan."
    },
    {
        "role": "assistant_1",
        "message": "Pa ne da bi zdaj hvalil FRI, ampak če so na FRI prešli iz Jave/C na Python, verjetno tudi obstaja kakšen razlog za to... Da ne bo sicer pomote jaz Pythona ne uporabljam, sem bolj zagovornik Rubyja, mi je pa tudi Python kot jezik čisto ok."
    },
    {
        "role": "assistant_10",
        "message": "bom zelo posplošil stvari: python = pseudo. c++ = sintaktično. pseudo rešitev > sintaktična rešitev. iz tega razloga bi ti svetoval python"
    },
    {
        "role": "assistant_11",
        "message": "Python je predvsem praktičen jezik, ki ti služi kjerkoli kot pripomoček (skriptni jezik v vsakem resnem programu). Po uporabnosti, hitrosti programiranja / prototyping-a prekaša vse ostale \"taprave\" programske jezike (ne boš šel pisat utility skript v Javi ali C++, lahko, ampak ne boš če obvladaš Python).  Označit Python za \"izgubo časa\" je smešno.  Morda ni primarno orodje v službi, je pa primarni pripomoček kjerkoli."
    },
    {
        "role": "assistant_4",
        "message": "Pythona ne poznam, ampak mam odpor do pisanja pseudo kode (ful preveč delam z R), prej ali slej prideš do tega, da rezultata nečesa ne moreš potlačit v parameter nečesa drugega, ker je vmes prišlo do \"nepredvidene\" pretvorbe. (npr. rezultat izbire nekaj vrstic iz matrike je vektor(če zbereš eno samo vrsto), uporaba dvojnih indeksov se jasno usuje na tem rezultatu... etc.) in je stvar hroščata v 3pm, tudi če paziš ko hudič.   Jaz še vedno preferiram strong typed sintaktične jezike, je pa fajn znat kako skriptno žival za hitre opravke :)"
    },
    {
        "role": "assistant_7",
        "message": "Osebno imam raje javascript, ker ga uporabljam pri razvoju html5 strani in aplikacij."
    },
    {
        "role": "assistant_12",
        "message": "Vsak jezik za svoje delo.  Skriptni jeziki so točno to kar pove ime. Za pisanje skript, ki ti olajšajo vsakdanje delo. Seveda ti nihče ne more preprečiti napisati velike aplikacije v skriptnem jeziku.  Java je primerna, če tvoj program dela na veliko različnih platformah in operacijskih sistemih.  C in ostale variante uporabiš kadar potrebuješ optimiziran program, ki porabi malo pomnilnika in naj bi bil hiter.  Vse to bluzenje kateri jezik je najboljši je brez zveze, če ne znaš razmišljat in si postaviti okvir programa. Tako kot ti kladivo nič ne pomaga če ne znaš zabijat žebljev.  Če šele razmišljaš kaj bi se učil, preveri malo urne postavke, ki so jih delodajalci pripravljeni plačati za znanje posameznih jezikov.  Razni C (in variante) znalci dobivajo precej več denarja kot neki PHP/python programerji. Ker jih danes preprosto manjka. Če pa bi rad službo do penzije, se pa nauči COBOL. Največ izvorne kode je napisane v tem jeziku, pa še stranke so ponavadi banke, kar pomeni dovolj keša ..."
    },
    {
        "role": "assistant_13",
        "message": "@assistant_4 je 12. jul 2012 ob 10:34 izjavil:Pythona ne poznam, ampak mam odpor do pisanja pseudo kode    Od kje pa tebi ideja, da je pyhton pseudo koda? Psudo koda je tole:   if Uporabnik nima pojma then\n trollaj\nelse\n ostani tiho\n  Pseudo koda je nekaj kar zgleda kot koda, pa v resnici ni koda."
    },
    {
        "role": "assistant_13",
        "message": "@assistant_12 je 12. jul 2012 ob 11:21 izjavil:Skriptni jeziki so točno to kar pove ime. Za pisanje skript, ki ti olajšajo vsakdanje delo. Seveda ti nihče ne more preprečiti napisati velike aplikacije v skriptnem jeziku.   Skriptni jeziki je en negativen buzzeord, ki so si ga izmislili tisti, ki verjamejo v to, da se v interpretiranih jezikih ne da napisati neke 'malo vecje aplikacije'.  Ko se zacenjas uciti pa je najboljse, da se ucis en malo visje nivojski jezik, recimo Java, Python, C# in pa se nekaj bolj elementarnega, recimo C."
    },
    {
        "role": "assistant_7",
        "message": "@assistant_12 je 12. jul 2012 ob 11:21 izjavil:Če pa bi rad službo do penzije, se pa nauči COBOL. Največ izvorne kode je napisane v tem jeziku, pa še stranke so ponavadi banke, kar pomeni dovolj keša ...  V tem trenutku se ne bi preveč zanašal na te banke..."
    },
    {
        "role": "assistant_4",
        "message": "@assistant_13 je 12. jul 2012 ob 11:32 izjavil:@assistant_4 je 12. jul 2012 ob 10:34 izjavil:Pythona ne poznam, ampak mam odpor do pisanja pseudo kode   Od kje pa tebi ideja, da je pyhton pseudo koda? Psudo koda je tole:   if Uporabnik nima pojma then trollaj else ostani tiho   Pseudo koda je nekaj kar zgleda kot koda, pa v resnici ni koda.   Lej napisal sem, da pythona ne poznam, ampak dostikrat delam v skriptnem jeziku R (ki je za moje pojme premalo \"tipiziran\") in je rezultat vedno neko hroščato sranje, ki ga je treba rešit v C# na koncu.  PS. tvoja psevdokoda = VBA, tko da :)"
    },
    {
        "role": "assistant_1",
        "message": "Python je v prvi vrsti general-purpose programski jezik, ne pa skriptni jezik. Primer primarno skriptnega jezika je npr. LUA in Javascript. Preberte si definicijo skriptnega jezika, pa vam bo jasno. Najbolj mi gre na živce, ko hočejo ljudje downgradeat nekaj v skriptni jezik, pa naj bo to Python ali pa Ruby. Pa daleč od tega da bi bil Python primeren samo za pisanje kratkih \"skript\", tisti ki je to izjavil pač ne pozna teh jezikov ali jih ni kaj dosti uporabljal."
    },
    {
        "role": "assistant_14",
        "message": "@assistant_4 je 12. jul 2012 ob 11:51 izjavil:@assistant_13 je 12. jul 2012 ob 11:32 izjavil:@assistant_4 je 12. jul 2012 ob 10:34 izjavil:Pythona ne poznam, ampak mam odpor do pisanja pseudo kode   Od kje pa tebi ideja, da je pyhton pseudo koda? Psudo koda je tole:   if Uporabnik nima pojma then trollaj else ostani tiho   Pseudo koda je nekaj kar zgleda kot koda, pa v resnici ni koda.   Lej napisal sem, da pythona ne poznam, ampak dostikrat delam v skriptnem jeziku R (ki je za moje pojme premalo \"tipiziran\") in je rezultat vedno neko hroščato sranje, ki ga je treba rešit v C# na koncu.  PS. tvoja psevdokoda = VBA, tko da :)   Vkolikor je meni ostalo v spominu, je @assistant_13 pravilno uporabil pseudo kodo. Pseudo koda, je pa vbistvu namenjena prenostljivosti samega programa in z njo nisi omejen na programski jezik oz. okolje v katerem se želi pseudo koda uporabit. Po domače povedano ... pseudo koda se napiše zaradi svoje prenosljivosti (recimo, da na začetku projekta še ne vemo v katerem okolju/prog. jeziku bomo razvijali svojo rešitev, ali pa recimo, da hoče nek C/C++/C# programer svoj problem predstaviti nekemu programerju, ki npr. programira v Pythonu. Z pseudo kodo, ne bo imel tisti, ki programira v Pythonu sintaksičnih problemov).  Me pa zanima ... Ali se v poslovnem svetu dejansko piše pseudo koda, ali se ta korak preskoči?"
    },
    {
        "role": "assistant_1",
        "message": "Po mojih izkušnjah ne. Pač ponavadi nekdo v besedah definira, včasih se napišejo še testi, potem se pač stvar skodira v nekem jeziku."
    },
    {
        "role": "assistant_15",
        "message": "@assistant_10 je 11. jul 2012 ob 22:53 izjavil:bom zelo posplošil stvari: python = pseudo. c++ = sintaktično. pseudo rešitev > sintaktična rešitev. iz tega razloga bi ti svetoval python  totalna bedarija. pythonsje \"vredu\" le da si se lotil. sledeče je fajn spoznat c. brez ++ ke, z nekaj uvida zakaj se stvari delajo kot se(eno majhno asmja, ali pa vsaj razlicnih platform). potem pa nekaj objektnega najbolje java. ter nekaj funcijskega tukaj bi jaz predlagal nemrle. vmes je faj tud povohat racket. ker ti različne paradigme pokažejo kaj se da naredit."
    },
    {
        "role": "assistant_16",
        "message": "@assistant_12 je 12. jul 2012 ob 11:21 izjavil:Vsak jezik za svoje delo.  S temle se strinjam.   @assistant_12 je 12. jul 2012 ob 11:21 izjavil:C in ostale variante uporabiš kadar potrebuješ optimiziran program, ki porabi malo pomnilnika in naj bi bil hiter.  S temle pa ne.  C uporabljaš, kadar programiraš nekaj na precej nizkem nivoju (driverji, kritične odseke kode, programe za specifične platforme), predvsem pa nevizualne aplikacije - ne pa kar počez. Danes je povsem zadovoljivo razvojno orodje za 95% + high-level end user aplikacij z GUI-jem nek RAD tipa C# ali Delphi. Hitrost delovanja v današnjih časih pri teh dveh ni nobeno vprašanje (gre za par promilov razlike), RAM že dolgo ni več problem, aplikacijo pa v RAD okolju naklikaš bistveno hitreje kot v C++ ali, bohnedaj v C. V bistvu tkole... Pisanje tovrstnih aplikacij v C (C++) je mazohizem.   Glede ostalega bi se pa kar strinjal."
    },
    {
        "role": "assistant_1",
        "message": "zakaj bi rabil javo za objektno, če že znaš python? a hočeš rečt da python ni objektni al kaj?"
    },
    {
        "role": "assistant_2",
        "message": "je, samo kolikor mi je znano, ima objektni model bolj okrnjen napram javi, cs..."
    },
    {
        "role": "assistant_17",
        "message": "http://skilldrick.github.com/easy6502/i... ... komodorjevski 6502 asm, nekaj kar mora znat vsak pošten programer."
    },
    {
        "role": "assistant_15",
        "message": "@assistant_1 je 12. jul 2012 ob 21:09 izjavil:zakaj bi rabil javo za objektno, če že znaš python? a hočeš rečt da python ni objektni al kaj?  ja ni"
    },
    {
        "role": "assistant_10",
        "message": "@assistant_15 je 12. jul 2012 ob 21:32 izjavil:@assistant_1 je 12. jul 2012 ob 21:09 izjavil:zakaj bi rabil javo za objektno, če že znaš python? a hočeš rečt da python ni objektni al kaj?  ja ni  a to ker ni totalno vse wrappano v object kot v javi al maš kaj drugega v mislih?"
    },
    {
        "role": "assistant_15",
        "message": "niti ne , to da je objektno realiziral nekje v 3ki je večjem njegov minus. objekt je še vedno \"neka reprezentacija\" stringa. brez zaščite spremenljivke pred posilstvom neke tuje metode."
    },
    {
        "role": "user",
        "message": "Omg kam je zašla tema. A obstaja kak stran ali pa učbenik, kjer so not vaje/naloge na katerih se potem učiš. Ker videov/teksta najdeš kolikor hočeš, ampak nalog na katerih se pa potem konkretno naučiš pa ne najdem ravno veliko. Pa drugače, kako dolgo se naj sploh ukvarjam z pythonom in potem začnem z kakim drugim jezikom."
    },
    {
        "role": "assistant_2",
        "message": "http://getpython3.com/diveintopython3/ pa mogoce se head first python, ce obstaja za py3. to je lahka knjiga za newbija.  poj pa samo vaja vaja vaja pa ostani na py in ne divergiraj gledat druge jezike zaenkrat"
    },
    {
        "role": "assistant_13",
        "message": "@assistant_15 je 12. jul 2012 ob 22:10 izjavil:niti ne , to da je objektno realiziral nekje v 3ki je večjem njegov minus. objekt je še vedno \"neka reprezentacija\" stringa. brez zaščite spremenljivke pred posilstvom neke tuje metode.   Kako interno objekt zgleda je popolnoma nerelevantno. To, da ni zascitenih in privatnih spremenljivk je pa zame prednost. Lahko API uporabljas tko kot hoces in ne tko kot avtor misli, da ga mors. :>"
    },
    {
        "role": "assistant_18",
        "message": "@assistant_13 je 13. jul 2012 ob 18:11 izjavil:To, da ni zascitenih in privatnih spremenljivk je pa zame prednost. Lahko API uporabljas tko kot hoces in ne tko kot avtor misli, da ga mors. :> Valda je zate prednost, ker nimas pojma za kaj se to uporablja in ne znas OOP."
    },
    {
        "role": "assistant_19",
        "message": "Lol, spet programerski flame war   @user, poglej si knjige zbirke Head First. Maš tud eno o PHP&MySQL."
    },
    {
        "role": "assistant_15",
        "message": "@assistant_19 je 15. jul 2012 ob 00:13 izjavil:Lol, spet programerski flame war   @user, poglej si knjige zbirke Head First. Maš tud eno o PHP&MySQL.  in kaj naj bi ti omenjena knjiga prinesla risen disciplino kitchme? saj ta je obvezna ampak nek presezek ?"
    },
    {
        "role": "assistant_19",
        "message": "Ni presežek, to so ti osnove."
    },
    {
        "role": "assistant_15",
        "message": "niso osnove, so le enk sreči preživet koncept."
    },
    {
        "role": "assistant_19",
        "message": "@assistant_15 je 22. jul 2012 ob 20:06 izjavil:niso osnove, so le enk sreči preživet koncept.  Ne razumem te čist, a to misliš koncept poučevanja ki ga uporablja zbirka Head First, al kaj? Dej bod bolj natančen."
    },
    {
        "role": "assistant_15",
        "message": "ja oboje je preživeto tako kot po miselnosti kot po implementaciji. nekdo kateri se dan danes uči programiranja se ne bo učil paskala in fortrana ako ravno smo sega vsi v mojem letniku. head first lahko tudi predlaga lepe počitnice v iraku sredi 20ih.(tam nekje se je mySQl še dobra alternativa)."
    },
    {
        "role": "assistant_19",
        "message": "Pa vseeno si se naučil programiranja, četudi pascal in fortran nista več tako razširjena kot nekdaj. Sicer je pa PHP še zmeraj najbolj uporabljan web jezik, podpirajo ga praktično vsi web hostingi, pa še ceneje te pride kot pa če bi hotu laufat npr. Javo (pa bi si js kot javanec bolj želel da bi blo obratno).  Ampak ok, kaj bi pa bla po tvoje boljša alternativa za PHP&MySQL?  EDIT: ok, ena stvar ki sem jo zanemaril je, da je pehapejevcev kot listja in trave, tko da če iščeš zaposlitev si bolj konkurenčnen z nekim specialnim računalniškim znanjem, kot pa s PHP&MySQL."
    },
    {
        "role": "assistant_6",
        "message": "Ja, lahko štartaš tudi z basicom in se boš česa naučil. Sicer bodo mnogi trdili, da bi blo bolje zate da tega nebi storil. Enako velja za PHP. Ta abominacija ti nardi več škode kot koristi.  Ampak ok, kaj bi pa bla po tvoje boljša alternativa za PHP&MySQL? Žalostno dejstvo je, da resnično boljše alternative ni.   \"WEB programiranje\" je v tako žalostnem stanju da obstajajo samo smrdljive in še bolj smrdljive zadeve, ki so v primerjavi z RAD programiranjem za desktop leta 2000 popolnoma kr neki. Gre skupaj z debato okrog stanja HTML5 standarda. Podobno žalostno oz. kr neki.  Pascal je res za časom ampak ti bo dal občutek za \"čistost\" jezika in programa. Boš znal na hitro prepoznat smeti in debilnosti."
    },
    {
        "role": "assistant_13",
        "message": "@assistant_18 je 14. jul 2012 ob 23:24 izjavil:@assistant_13 je 13. jul 2012 ob 18:11 izjavil:To, da ni zascitenih in privatnih spremenljivk je pa zame prednost. Lahko API uporabljas tko kot hoces in ne tko kot avtor misli, da ga mors. :> Valda je zate prednost, ker nimas pojma za kaj se to uporablja in ne znas OOP.   Jaz sem zase sicer povedal zakaj je to prednost. Ti pa trapas in se delas pametnega. No, razlozi mi kaj delam narobe in cesa ne znam."
    },
    {
        "role": "assistant_20",
        "message": "Python pa C."
    },
    {
        "role": "assistant_21",
        "message": "Katere jezike trenutno učijo na FRI-ju? Nej napiše tisti, ki ima res podatke, ne tisti, ki je 5 let nazaj hodil na faks"
    },
    {
        "role": "assistant_6",
        "message": "Na faksu NE učijo jezikov, na faksu učijo principe in koncepte programiranja. Izbrani jezik je le tovornjak, za prevoz teh idej."
    },
    {
        "role": "assistant_21",
        "message": "Haha, vedno se oglasi nek \"pametni\" forumaš. Vem da na FRI ne učijo jezikov, ker gre za fakulteto za računalniško in informatiko in ne programerski faks. Da vprašam še za tiste drugačne uporabnike tega foruma: Katere izbrane jezike za prevoz principov in konceptov programiranja se zadnje leto ali dve uporablja na FRI?"
    },
    {
        "role": "assistant_19",
        "message": "Na VSŠ je pri Programiranju 1 Python, pri Programiranju 2 pa Java."
    },
    {
        "role": "assistant_22",
        "message": "Zanimivo, na FERI je pri Programiranje 1 & 2 izključno C++."
    },
    {
        "role": "assistant_15",
        "message": "@assistant_13 je 23. jul 2012 ob 12:19 izjavil:@assistant_18 je 14. jul 2012 ob 23:24 izjavil:@assistant_13 je 13. jul 2012 ob 18:11 izjavil:To, da ni zascitenih in privatnih spremenljivk je pa zame prednost. Lahko API uporabljas tko kot hoces in ne tko kot avtor misli, da ga mors. :> Valda je zate prednost, ker nimas pojma za kaj se to uporablja in ne znas OOP.   Jaz sem zase sicer povedal zakaj je to prednost. Ti pa trapas in se delas pametnega. No, razlozi mi kaj delam narobe in cesa ne znam.  ne pokazali si da ti ni jasen niti pojem apija. kje šele programskih paradigm. sej če ti paše imaš proceduralne jezike pa večji del interpraterjev. pust stvari katerih ne zastopš. ampak na veliko napiš ko sodeluješ v kakem projektu sploh kjer se delo deli. ker podobno zoprni ti morajo bit tud muteksi , semaforji in ostale zadeve, katere omejujejo tvoj programerski polet? le zakaj bi katero koli stvar zapakiral v uporaben black box če ti lahko nekdo naknadno manipulira z zankami. no ja nekoliko težje, ker v sosledje varnosti kasneje uvedemo v jezik interpreter lock pa vse kopiramo da nismo glih obupno nevarni sami sebi. pa da ne bo pomote vsi ljubimo to, ampak za neko userend aplikacijo pač to ni zaželjeno. če jo uporabljaj en ali dva še gre sicer pa ne."
    },
    {
        "role": "assistant_23",
        "message": "Na FERI-ju na Informatiki (VSŠ) skozi vsa tri leta C#, v 2. letniku se pri predmetu Dinamične Spletne Rešitve uporablja ASP.NET MVC3.. Medtem, ko pa na Informatiki (UNI) večinoma JAVA, nekaj je tudi PHP-ja.."
    },
    {
        "role": "assistant_19",
        "message": "lol, na vsš M$-jevi jeziki, na uni pa open source"
    },
    {
        "role": "assistant_1",
        "message": "Sej delo v MS jezikih je bolje plačano... VSŠ izobražujejo za delo, UNI pa očitno za akademsko ane. Izbira je kar logična."
    },
    {
        "role": "assistant_24",
        "message": "FERI RIT UNI Programiranje 1&2 ter aps = c++ Ostali predmeti je povečini jezik po želji, sploh v 2 letniku se ne komblicira, razen če se kaki dll-ji pišejo. Je še pa bash, C, mfc, c#, assembler, java. V tretjem letniku bomo pa še videli, predvidevam, da bo povečini jezik po izbiri, razen če se pri kakšni vaji izrecno zahteva kaj drugega.  Sicer pa ne vidim velike težave prešaltat na drug programski jezik, po tem ko ti en že gre kr dobro. Ali pa smo mi dobili ok podlago iz C++."
    },
    {
        "role": "assistant_15",
        "message": "Sicer pa ne vidim velike težave prešaltat na drug programski jezik, po tem ko ti en že gre kr dobro. Ali pa smo mi dobili ok podlago iz C++. mogoče je res kar pravič ampak dej mi povej kako človek po vaše intiktivno šalta med gojenjem for stavka v proceduralnem, iteratorji v ojektnem anu mapom v funkcijskem? pa kako nek lolek na faksu debugira c++ kodo?"
    },
    {
        "role": "assistant_24",
        "message": "Ne vem, kaj točno me sprašuješ, ampak for/if/while... so v teh jezikih, ki sem jih uporabljal klasika (-asm), ni nekih velikih sprememb, bolj v sintaksi. Pač hotel sem povedat, da se ni tako težko priučiti drugega jezika, če imaš osnove pokrite, pa če je dovolj literature, kar je na spletu povečini je.  Kako se debugga? Posebej nas niso učili, sam pač pripravim breakpointe, kjer se zadeva zalomi pa pogledam vrednosti. Za neko drugo pot nisem glih slišal..."
    },
    {
        "role": "assistant_13",
        "message": "@assistant_15 je 24. jul 2012 ob 19:32 izjavil:ne pokazali si da ti ni jasen niti pojem apija. kje šele programskih paradigm. sej če ti paše imaš proceduralne jezike pa večji del interpraterjev. pust stvari katerih ne zastopš. ampak na veliko napiš ko sodeluješ v kakem projektu sploh kjer se delo deli.   Seveda, spet nekdo, ki samo trolla in ne da nobenega pametnega argumenta za svoje trditve. Edina stvar, ki jo v resnici pridobis s private/protected/public metodami/spremenljivkami je to, da lahko tvoj IDE prikaze kaj je 'public API' interface in kaj so helper metode, ki jih naceloma ne klices.  Pred kom bi sicer rad zavaroval podatke? Pred zlobnezi, ki delajo s tabo na projektu? Pred zlobnezi, ki zelijo, da tvoj API crkne medtem, ko ga uporabljajo v svoji aplikaciji? Ce imas pa mission critical zadevo (recimo, da si banka), potem mora pa tvoj API biti tak, da tako ali tako ne dela direktno s kriticnimi podatki ampak je vmes se vsaj en layer, ki preverja vse kar je potrebno preveriti.   @assistant_15 je 24. jul 2012 ob 19:32 izjavil:ker podobno zoprni ti morajo bit tud muteksi , semaforji in ostale zadeve, katere omejujejo tvoj programerski polet?    Itak, vse to so samo cokle pri delu nekoga, ki je tako brilijanten kot sem jaz in iz rokava stresa pure binary ze preveden za vse platforme pod soncem. Jaz sem pisal programe za 256 bitne procesorje, ko se intelu se sanjalo ni o 32 bitnih! Sam tolk, da ves ..."
    },
    {
        "role": "assistant_1",
        "message": "Nebi se strinjal da je private/public uporaben samo za API... Encapsulation (object-oriented programming) @ Wikipedia Hiding the internals of the object protects its integrity by preventing users from setting the internal data of the component into an invalid or inconsistent state. A benefit of encapsulation is that it can reduce system complexity, and thus increases robustness, by allowing the developer to limit the interdependencies between software components."
    },
    {
        "role": "assistant_11",
        "message": "Saj v Pythonu lahko (delno) zavaruješ elemente objekta pred zlorabo - tako da jih poimenuješ z enojnim ali dvojnim podčrtajem. Enojni podčrtaj je le hint uporabniku \"ne tikaj tega če ne veš kaj delaš\", dvojni pa dejansko oteži šarjenje po spremenljivki / klicanje metode (ne pa v celoti prepreči).  To je vse kar moder uporabnik rabi. Ne vem zakaj bi se moral API developer posebej potrudit da ti \"100%\" prepreči delat neumnosti? Java je ortodoksno zaguljena glede tega."
    },
    {
        "role": "assistant_6",
        "message": "Kaj ti v javi preprečuje da ubereš natanko enako pot? \"Loaded\" imena spremenljivk so pa sploh svoga dnarja vredna... GPSS comes to mind."
    },
    {
        "role": "assistant_11",
        "message": "@assistant_6 je 25. jul 2012 ob 14:28 izjavil:Kaj ti v javi preprečuje da ubereš natanko enako pot?  Offtopic redeča nit te teme je da je Python \"slab ker nima prave enkapsulacije\". Jaz sem samo enakega mnenja kot @assistant_13, tj. da se da lepo preživet brez striktne enkapsulacije in ni zaradi tega Python nič manj OOP."
    },
    {
        "role": "assistant_25",
        "message": "Seveda da ni, pa seveda se da. Samo glede na to da so morali pri Pythonu priti do tako butastih rešitev kot je delanje črtic pred imeni da simulirajo enkapsulacijo kaže, da bi taki konstrukti v jeziku precej pomagali.  Seveda, spet nekdo, ki samo trolla in ne da nobenega pametnega argumenta za svoje trditve. Edina stvar, ki jo v resnici pridobis s private/protected/public metodami/spremenljivkami je to, da lahko tvoj IDE prikaze kaj je 'public API' interface in kaj so helper metode, ki jih naceloma ne klices.   Jao, ne nakladi no. Pejt enkrat en mal večji projekt pogledat (oz. raje dva, enega v Javi, drugega v Pythonu) pa ti bo mal bolj jasno zakaj so take stvari zelo uporabne pri razvoju. Pri projektih kjer se trije ljudje bockajo pač to ni nekaj kar bi prišlo do izraza - isto kot type sistem."
    },
    {
        "role": "assistant_13",
        "message": "Pred kom hudica mors zavarovat interne variable in metode? Tukaj ne gre za uporabnike tipa 'joze in micka', ki klikata po aplikaciji ampak gre za uporabnike doticnega lib-a, api-ja. Gre za ljudi, ki vsaj priblizno vedo kaj delajo in kako se dolocene zadeve uporablja.  Jaz vem zakaj in kako se uporablja private/public/protected ampak ne vidim razloga zakaj bi moral zavarovati stvari pred drugimi oziroma pred kom? Pred kolegi v firmi, ki delajo z menoj? Njim ze sama dokumentacija pove kaj lahko in cesa ne smejo. A bo zaradi tega kak bug manj, ce bom namesto public naredil private variable in napisal getter/setter metodi? Preverjanje inputa se bom sel ob vnosu. Pa velja isto za projekt kjer delajo trije, trideset ali pa tristo programerjev.  Pridobim to, da se nek programer ne bo zmotil in po nesreci popravljal neko interno spremenljivko na nedovoljeno vrednost. Zmotil se bo pa zato, ker bo narobe prebral specifikacije. Mnja.  No, saj ne pravim, da je Python zaradi tega boljsi. Insanity z underscore pred imenom spremenljivke je prav tako traparija."
    },
    {
        "role": "assistant_1",
        "message": "@assistant_13 gre se za to da se ti lahko zgodi, da nekaj sprogramiraš, in potem čez eno leto nekaj delaš, ko si že pozabil točno kako in kaj. Če so pa še drugi programerji v igri potem pa sploh. Je napaka da obravnavaš programerje kot neke ljudi brez napak ki se ne morejo zmotit. Pač enkapsulacija je en način kako preprečit da se dela z objektom nekaj kar ni bilo načrtovano. Če bi bli programerji popolni je verjetno nebi lih rabil. Pomaga pa tudi pri abstrakciji pa take stvari. Lah se ti zgodi da recimo ne veš da v bistvu ta pa ta metoda spreminja to pa to stvar in je nej nebi klical izven samega objekta... Itd. mal pogoogli oop encapsulation pa boš najdu kakšno bolj konkretno razlago. Enkapsulacija je ena od temeljnih stvari v OOP, tko da če se greš OOP naj bi načeloma tko delal. Lah se pa greš kej drugega."
    },
    {
        "role": "assistant_26",
        "message": "@assistant_13 je 25. jul 2012 ob 17:22 izjavil:Pred kom hudica mors zavarovat interne variable in metode? Tukaj ne gre za uporabnike tipa 'joze in micka', ki klikata po aplikaciji ampak gre za uporabnike doticnega lib-a, api-ja. Gre za ljudi, ki vsaj priblizno vedo kaj delajo in kako se dolocene zadeve uporablja.  Jaz vem zakaj in kako se uporablja private/public/protected ampak ne vidim razloga zakaj bi moral zavarovati stvari pred drugimi oziroma pred kom? Pred kolegi v firmi, ki delajo z menoj? Njim ze sama dokumentacija pove kaj lahko in cesa ne smejo. A bo zaradi tega kak bug manj, ce bom namesto public naredil private variable in napisal getter/setter metodi? Preverjanje inputa se bom sel ob vnosu. Pa velja isto za projekt kjer delajo trije, trideset ali pa tristo programerjev.  Pridobim to, da se nek programer ne bo zmotil in po nesreci popravljal neko interno spremenljivko na nedovoljeno vrednost. Zmotil se bo pa zato, ker bo narobe prebral specifikacije. Mnja.  No, saj ne pravim, da je Python zaradi tega boljsi. Insanity z underscore pred imenom spremenljivke je prav tako traparija.   Separation of concerns? Loose coupling? Ni bistvo v tem da bi se trudil skriti - vedno lahko prideš do nekega podatka z neke sorte reflectionom, tudi če je private. Namen je preprosto dati zunanjemu svetu minimalen nabor, ki mu v celoti zadostuje. Keep it simple, nobene potrebe ni po tem, da se navzven vidi vse podrobnosti.  Enkapsulacija ti pomaga, da se držiš dobrih praks. Po možnosti je zato še koda dovolj self-descriptive, da se sploh ni treba zakopat v dokumentacijo."
    },
    {
        "role": "assistant_13",
        "message": "Ja, ampak to ti pomaga samo takrat, ko tvoj IDE zna pred teboj skriti privatne in protected zadeve. Dokler imas dostop do kode APIja, ki ga uporaljas je to skoraj edina prednost. Za uporabo APIja bos moral ali prebrati dokumentacijo ali odpreti kodo.  Ce nimas kode, potem uporabljas tiste stvari za katere ves, da obstajajo in so omenjene v dokumentaciji. Seveda, ce so privatne zadeve skrite, potem necesa ne mores po nesreci uporabiti in preprecis, da bi nekdo namenoma iskal taksne stvari. Hkrati pa preprecis tistim, ki bi lahko to uporabili v svojo prednost, da tega ne morejo narediti. Meni se je ze zgodilo, da je nekdo naredil nekaj spremenljivk privatnih in ni bilo nobenega getterja zanje. Ker je bil to nek zaprt API je trajalo pol leta, da so na drugi strani to potem popravili. Po precej prepricevanja so ugotovili, da imam prav in da bi bilo lepo imeti vsaj getter za tiste zadeve.  Ce pa imas kodo, potem je pa tako ali tako iz kode razvidno kaj lahko uporabljas in cesa ne.  Hocem samo povedati, da enkapsulacija ni nek sveti gral OOPja in da je vcasih lahko precej v nadlego. Moj prvi post o tem je bil pa itak flamebait. In to se kar uspesen! ;)"
    },
    {
        "role": "assistant_1",
        "message": "Encapsulation is one of the four fundamental OOP concepts. The other three are inheritance, polymorphism, and abstraction."
    },
    {
        "role": "assistant_13",
        "message": "Ja, pa kaj? To se ne pomeni, da ti ne more biti v napoto. :) Pa zaradi tega ni sveti gral. Hehe."
    },
    {
        "role": "assistant_25",
        "message": "@assistant_13: Recmo temu tko: \"Zastonj\" dokumentacija, kjer compiler brca ljudi ki jo hočejo kršiti. Isto kot type sistem ;)"
    },
    {
        "role": "assistant_1",
        "message": "Men se zdi podobno, kot da bi rekel da ne rabiš compilerja, da ti preverja sintaktične napake, ker itak dobri programerji \"vejo\" kako je treba delat. Vsi programerji se motijo."
    },
    {
        "role": "assistant_15",
        "message": "@assistant_25 je 26. jul 2012 ob 11:16 izjavil:@assistant_13: Recmo temu tko: \"Zastonj\" dokumentacija, kjer compiler brca ljudi ki jo hočejo kršiti. Isto kot type sistem ;)  nevem čemu mižikaš type sistem je povsem uporaben, če jezik podpira pattern matching. ampak to je za slo tech že preveč. raj se grejo duck typing. nej še sosedu krava crkne."
    },
    {
        "role": "assistant_15",
        "message": "Pred kom hudica mors zavarovat interne variable in metode? Tukaj ne gre za uporabnike tipa 'joze in micka', ki klikata po aplikaciji ampak gre za uporabnike doticnega lib-a, api-ja. Gre za ljudi, ki vsaj priblizno vedo kaj delajo in kako se dolocene zadeve uporablja. ker ne moreš zagotovid thred safe delovanja, če tega ne veš ne trapaj kot krava s teletom."
    },
    {
        "role": "assistant_15",
        "message": "pa še kaj je rešitev za gil http://python-3-patterns-idioms-test.re..."
    },
    {
        "role": "assistant_13",
        "message": "@assistant_15 je 26. jul 2012 ob 13:41 izjavil:Pred kom hudica mors zavarovat interne variable in metode? Tukaj ne gre za uporabnike tipa 'joze in micka', ki klikata po aplikaciji ampak gre za uporabnike doticnega lib-a, api-ja. Gre za ljudi, ki vsaj priblizno vedo kaj delajo in kako se dolocene zadeve uporablja. ker ne moreš zagotovid thred safe delovanja, če tega ne veš ne trapaj kot krava s teletom.   V bistvu res nevem o cem govoris in zakaj ne bi mogel zagotoviti thread safe delovanja, ce nimas privatnih/protected spremenljivk in metod. Das lahko kak primer?"
    },
    {
        "role": "assistant_15",
        "message": "@assistant_13 je 27. jul 2012 ob 09:16 izjavil:@assistant_15 je 26. jul 2012 ob 13:41 izjavil:Pred kom hudica mors zavarovat interne variable in metode? Tukaj ne gre za uporabnike tipa 'joze in micka', ki klikata po aplikaciji ampak gre za uporabnike doticnega lib-a, api-ja. Gre za ljudi, ki vsaj priblizno vedo kaj delajo in kako se dolocene zadeve uporablja. ker ne moreš zagotovid thred safe delovanja, če tega ne veš ne trapaj kot krava s teletom.   V bistvu res nevem o cem govoris in zakaj ne bi mogel zagotoviti thread safe delovanja, ce nimas privatnih/protected spremenljivk in metod. Das lahko kak primer?  ker boš moral to postorit v cju, sam jezik ti pa tega ne omogoča. to je ta jeba. na koncu pristaneš pri definiranuju kritičnih cekcijah. bog ne daj pa da je podstat napisana v c++ kjer sta podatkovna struktura in metode zapovrh še vazane ne eksekucijo. java ko powrapaš native skrije pred tabo vmešavnaje v izvajanje python pa z nekaj triki tega ne zmore po vsem. pa ni to samo tvoj problem pri večini reševanja problemov na forumu sem videl veliko priljubljenost statičnih spremeljivk. nevem al to učijo po naših šolah. al je to domača obrt. ampak tga se ne dela. nikoli, razen z namenom izmenjave podatkov me nitmi in procesi. celo read je nevaren ker ne veš koliko časa bo rajal in ali je spremenljivka sploh inicializirana. zato tudi pristiska trend funcijskih jezikov. ker je koda bolj predvidljiva. lahko pa za vsako stvar pišeš sleep funkcije in podobno ampak to danes ni več spodobno. no je vsi smo jih in se bodo tudi v bodoče še en lep čas. ti pa zjebe to vsakršno predvidljivo enkapsulacijo in modularizacijo. naj bo na dnu kralj c(katerega je fajn da pozna vsak programer), čezenj pa jezik s solidno semantiko, in ta naj onemogoča svinjarije, ker v nasprotnem je vs GC in ostalo neefektno."
    },
    {
        "role": "assistant_13",
        "message": "Se vedno ne vem o cem govoris pri thread safe delovanju in privatnimi spremenljivkami. Zato sem tudi prosil, da das primer, ko bo neka allegedly thread safe funkcija odletela, ker bo uporabljala public namesto privatno spremenljivko."
    },
    {
        "role": "assistant_12",
        "message": "Če po zaključku faksa ne znaš preklopit na drug jezik v relativno kratkem času, potem pomeni da se niti ni naučil programirati.  Sam sem do sedaj delal v približno 10 jezikih v različnih službah, pri čemer je kak jezik specifičen za produkt.  Se pač naučiš, seznaniš z omejitvami in plusi in delaš.  Tudi kladivo ti ne pomaga če ne veš kje in kako zabijati žebljev ..."
    },
    {
        "role": "assistant_6",
        "message": "Ma ja, ta fiksacija na Pravi Jezik je čisto mimo. Al znaš govorit al pa ne znaš. To je vse kar šteje. Al se v Pythonu da skladat sonete al je boljši za Rap je pomembno šele ko že znaš govorit."
    },
    {
        "role": "assistant_27",
        "message": "@assistant_13 je 29. jul 2012 ob 09:25 izjavil:Se vedno ne vem o cem govoris pri thread safe delovanju in privatnimi spremenljivkami. Zato sem tudi prosil, da das primer, ko bo neka allegedly thread safe funkcija odletela, ker bo uporabljala public namesto privatno spremenljivko.  prej obratno.  public funkcija/property mogoce poskrbi, da se znotraj tega classa vse izvaja v \"thread-safe\" nacinu.Ce gre nekdo drkat po privat spremenljivkah mas pa takoj problem. Oz mogoce public property po tem ko nastavi privat spremenljivko se kaksen event dvigne. Ampak ook...ne vem o kerem jeziku je tocno govora ampak sklepam, da se mora nek zunanji programer hudicevo dobro potruditi preden sploh zacne praskat po privat funkcijah/propertyjih. To potem verjetno dela z nekim razlogom :)"
    },
    {
        "role": "assistant_18",
        "message": "@assistant_13 je 23. jul 2012 ob 12:19 izjavil:@assistant_18 je 14. jul 2012 ob 23:24 izjavil:@assistant_13 je 13. jul 2012 ob 18:11 izjavil:To, da ni zascitenih in privatnih spremenljivk je pa zame prednost. Lahko API uporabljas tko kot hoces in ne tko kot avtor misli, da ga mors. :> Valda je zate prednost, ker nimas pojma za kaj se to uporablja in ne znas OOP.   Jaz sem zase sicer povedal zakaj je to prednost. Ti pa trapas in se delas pametnega. No, razlozi mi kaj delam narobe in cesa ne znam.  Na tem forumu so dostikrat debate o prednostih quick and dirty jezikov pred bolj staticnimi jeziki z visibility modifierji in podobnim, oziroma o nepotrebnosti uporabe teh mehanizmov v jezikih, ki jih podpirajo. Do neke mere so take debate legitimne (ceprav sem jaz vedno za uporabo teh mehanizmov), ker tukaj prakticno vsi delamo koncne produkte, kjer je vsa oziroma vecji deli kode nasa lastna ali pa vsaj iz ozkega kroga ljudi, in je zato omejevanje vidnosti nekoliko manj smiselno.  Potem pa prides ti in reces, da je prednost ne imet omejene vidnosti pri APIjih. Od vseh stvari moznih si ravno APIje najdu, softwersko podrocje kjer so prednosti visibility modifierjev dalec najbolj ocitne. Iz tega je mogoce sklepat le, da ne poznas izdelave in vzdrzevanja APIjev in ne razumes OOP.  APIji oziroma objekti ki nastopajo v njih imajo pogosto contracte, ki se jih morajo drzat. Lep primer je java String, ki mora bit immutable. Ce nobene metode ni mozno skriti, potem ne mores imeti convenience metod v APIju katere bi unicile ta contract. Recimo String class ima konstruktor, ki prejeti char[] ne kopira, kar omogoca, da naredis String, ki je mutable. To bi lahko unicilo delovanje celega kupa druge kode, zato je ta konstruktor package scoped in ga uporabljajo samo posveceni classi kot je StringBuilder. Ce je vse public ne mores imeti metod, ki predpostavljajo, da so parametri pravilno formirani, ne mores imeti metod, ki predpostavljajo, da je objekt v dolocenem stanju, ne mores imeti metod, ki predpostavljajo, da so klicane pred ali za neko drugo metodo. Vse to izredno otezi pisanje APIja in dela njegovo kodo konfuzno. Potem takoj pride potreba po pisanju dolge dokumentacije o tem kdaj se lahko kaj klice in kako to mutira stanje objekta, ker je to pomembno za funkcije in treba je popisat vse tipe in vse funkcije, kaj so in kaj pocnejo.  Druga stvar je to, da vse kar je public lahko nekdo uporablja, torej ko izdas novo verzijo APIja moras naceloma public del ohranjat identicen. Ce ne mores nicesar skriti potem je vsako metodo v APIju potencialno nekdo uporabil in ne mores spremenit niti enega method signaturea v APIju, kaj sele da bi delal velike refactoringe v kolikor hoces da je nova verzija kompatibilna s staro. Kar je se hujse, lahko se spremeni delovanje kaksne metode, tako da vraca drugacne rezultate pri dolocenem inputu.   Recimo neka interna funkcija za iskanje po drevesu v seznam zadetkov poleg otrok po novem doda tudi vozlisce samo. Ti si to spremenu, ker nekje rabis za neko novo funkcionalnost, in potem popravis vse klicatelje te funkcije znotraj te knjiznjice, da upostevajo to novo dejstvo. In ce je ta funkcija public in jo je nekdo uporabljal, si bo nalozil novo verzijo knjiznjice in se mu ne bo nic rdece pobarvalo, ker je sintaksa ista in bo njegova koda zacela vracat napacne rezultate. Vcasih zaradi kompleksnosti ali pa kolicine podatkov traja mesece, da napacno delovanje opazis in odpravis. In potem moras za knjiznjico pisat podrobne change loge in folk jih mora brat (fat chance).  Torej manjsi kot je public del, bolj si fleksibilen v spremembah delovanja knjiznjice, ki bodo povsem transparentne za uporabnika.   Tretja stvar je to, da imajo dobri API ozek interface (kolikor pac to omogoca problemska domena). Ni hujsega kot da si za nekaj relativno enostavnega potegnes dol knjiznjico in je potem 100 classov s 10 metodami vsak pa ogromno konstruktorji, da te na rit vrze ko stisnes autocomplete k je tok opcij. Stevilo tipov naj bo omejeno, stevilo vstopnih tock cim manjse (vstopne tocke kot prva API funkcija ki jo klices), prav tako je dobro minimizirat stevilo povezav med deli APIja (torej stevilo poti rezultatov neke operacije v naslednji korak - razen kadar je v naravi problema nasprotno).  Recimo da delam XPath over JSON knjiznjico. Zadeva obsega 40 classov, vidnih je 5. Dva exception classa brez vidnih konstruktorjev, dva interfaca s po dvema metodama(metode enega vracajo instance drugega), en class brez vidnega konstruktorja in z eno staticno metodo, ki vraca implementacijo enega od interfaceov.  Tak API ima natancno eno vstopno tocko (staticna funkcija), dobis instanco enega interfacea, iz katerega dobis listo instanc drugega. Simpl kot pasulj. API sam rabi 0 vrstic dokumentacije. Jst lahko zamenjam parser generator iz JCup na Beaver (cisto drugi classi in function signaturei) in noben uporabnik ne bo nicesar opazu. Ce bi imel pa vidnih vseh 40 classov pa vse metode, bi pa moral napisat user manual, ohranjat sintakso in delovanje obstojecih funkcij, le nove bi lahko dodajal, rigidno k svinja, v vse funkcije dodat checke za razna stanja, ker ne bi mogel delat dolocenih predpostavk, itd... stvari k sm jih zgoraj omenil.  Zdej ce pa kdo misli, da boljs ve od avtorjev kako API uporabljat, ima pa ponavadi na voljo source, pa naj si ga sname pa nastima vse na public pa si naredi lib in ga da v svoj projekt. In naj to tudi sam podpira, ostalih 99.9% uporabnikov bo pa raje imelo easy to use, narrow API, ki je funkcionalno in sintakticno stabilen skozi verzije.  In v koncni fazi, ce so si avtorji slabo zamislili ali implementirali API, pa skoraj nikoli tega ne bos resil z drugacnim, lasnorocnim klicanjem njihovih internal funkcij, ampak bos to resil bodisi z downloadanjem sourcea in odpravo bugov bodisi z izbiro druge knjiznjice bodisi s pisanjem svoje. Torej tudi iz tega stalisca tvoja ideja ni smiselna.  V koncni fazi imas te benefite tudi na produktih za koncne uporabnike (mocnjesi benefiti vec kot ljudi dela na projektu), zato je zagovarjam klasicne OOP prijeme pri vseh projektih. Ampak ce je tam to stvar debate (\"jst raje hitro prototipiram z node.js bla bla\" - can be a valid opinion) so ti benefiti pri APIjih 100x mocnejsi in kakrsnokoli mnenje, da je implementation hiding brezveze pri njih, nima nobene podlage."
    },
    {
        "role": "assistant_18",
        "message": "@assistant_13 je 25. jul 2012 ob 07:33 izjavil:Edina stvar, ki jo v resnici pridobis s private/protected/public metodami/spremenljivkami je to, da lahko tvoj IDE prikaze kaj je 'public API' interface in kaj so helper metode, ki jih naceloma ne klices. Missing the point. Pozabil sem tudi omenit, da kar sem napisal velja za splosne user knjiznjice, za posebne (recimo security knjiznjice) pa velja dvojno. Pa ljudje ki govorijo o thread-safety imajo tudi point. Ce hoces thread-safe mora biti vsaka javna metoda z mislijo na to napisana, kar ce nimas ne-javnih metod v koncni fazi pomeni vse metode. Zaradi tega lahko pride do tega, da postane to bodisi nemogoce, bodisi zapleteno, bodisi pocasno (sinhronizacija je draga k pes)."
    }
]