[
    {
        "role": "user",
        "message": "Živjo,  potrebujem bazo podatkov (recimo v MySQL, pgsql), do katere bo imelo dostop 10 ljudi po principu server-client. Imam nakaj vprašanj:  1. uporabnik na bi bazo uporabljal prek nekega grafičnega vmestnika: ta bi mu omogočal pisanje v bazo, pregledovanje baze, vendar s pomočjo vnaprej postavljenih gumbov in ne tako, da sam piše iskalne stavke.   2. Ali je možno, da se baza shranjuje v XML formatu. Je v tem primeru uporaba MySQL-a sploh smiselna, ali je potrebno ubrati kakšen drug pristop.  Upam, da sem povedal dovolj jasno. Hvala za odgovore."
    },
    {
        "role": "assistant_0",
        "message": "Server: MYSQL + PHP. Client: Browser. :)"
    },
    {
        "role": "assistant_1",
        "message": "PHP je tko out!    Ruby on Rails ali pa Django is the way to go. Pri teh dveh je zanje SQLa lahko minimalno."
    },
    {
        "role": "assistant_2",
        "message": "PHP ni tako zelo out. Vsaj ne zato, ker se pojavi neka 'novotarija' ;)"
    },
    {
        "role": "assistant_3",
        "message": "Kak Django, TurboGears ali pa UnCommon Web."
    },
    {
        "role": "assistant_1",
        "message": "@assistant_2: Out ni zato, ker obstaja ogromna baza knowhow-a in supporta. To se ne pomeni, da je PHP se vedno \"the best thing after sliced bread\". Ni. Je grd, neroden, C-jevsko-JAVA-nski (kar ni nujno slabo), ...  Ce nekdo hitro potrebuje database-driven website ga ni razloga, da se ga ne bi lotil ustvarit z RoR/Django/TG/... frameworki.  Ce povzamem z besedami David Hansson-a: \"If people keep writting applications in Java, yes, world will come to an end.\""
    },
    {
        "role": "assistant_4",
        "message": "Okej, zacel si flame war. Tvoja stvar.  Temeljna napaka PHPja je neuniformiran framework ter slabo zastavljen API. Sicer pa ta jezik zna ogromno. Tezava je, ker je bil nadgrajevan, tako da imas na koncu layer upon layer stvari, ki dostikrat delajo isto.  Java teh tezav nima. Iz stalisca spletnega programiranja je to prava pesem.  Me pa zanima, kaksni so tvoji kontraargumenti za take programske jezike, in kaj mislis, da je poglavitna prednost ROR."
    },
    {
        "role": "assistant_3",
        "message": "Vem, da ni namenjeno meni, ampak vseeno.    Me pa zanima, kaksni so tvoji kontraargumenti za take programske jezike, in kaj mislis, da je poglavitna prednost ROR. ROR na poznam, zato bom govoril za Python:  1) Za 90 % spletnih projektov (bolj ali manj) stroga tipizacija ni potrebna, še več, je celo na poto.  2) Za 90 % spletnih projektov skrivanje implementacije ni potrebno. Getterji in setterji (četudi avtomatično generirani) samo dodajajo k nepreglednosti.  3) Za 90 % spletnih projektov ima Java preveč toge protokole (cikam na J2EE servlet arhitekturo).  4) DSL-ji se v Javi povečini opisujejo v XML-ju, ki je za človeka precej neberljiv.  5) Stroga (in hkrati pohabljena) objektna naravnanost ni optimalna rešitev za vse porbleme. Poleg tega od programerja zahteva dodatno znanje paradigmov (to samo po sebi ni slabo, ampak v realnih okoliščinah pomeni, da precej pogosteje dobiš kak WTF).  6) Preprosto povedano, kot jezik je Java šibka ali vsaj zelo omejujoča. Resda obstajajo razni byte-code hacki, ampak to je rezervirano za peščico, medtem ko je metaprogramiranje v Pythonu dostopno večini.  7) Statičnost (v smislu jezika) je povsem nepotrebna, a omejujoča."
    },
    {
        "role": "assistant_5",
        "message": "Owca, poglej si annotatione in AOP (Aspect Oriented Programming), pa se ti bodo odprla nebesa meta programiranja, v kolikor te to interesira. Seveda ne gre pozabiti tudi Reflection API ... Pythona ne poznam dobro, zato ne vem, kaj točno ti pojmuješ pod metaprogramiranje.  Ostale točke, ki si jih navedel, so pa bolj trhli argumenti. Ampak, nima veze, važno da imamo veliko izbiro prog. jezikov."
    },
    {
        "role": "assistant_6",
        "message": "Owca, prav nasprotno, Java je jezik prihodnosti, še posebej za velike sisteme."
    },
    {
        "role": "assistant_3",
        "message": "AOP poznam (vsaj v teoriji), poanta je predvsem v tem, da je v kakšnem Pythonu to (in še več) posledica zasnove jezika, ki je čisto samoumevna in ne nek poseben paradigem. Nič ne rečem, tisti ki Javo res obvladate lahko pišete povsem primerljive rešitve s katerim koli drugim jezikom. Ampak, še vedno bo razlika v konciznosti. Poleg tega je vprašanje kakšno je razmerje med vloženim časom in kvaliteto za povčnega programerja ali celo začetnika (da ne bo pomote, slednje čisto resno sprašujem, ne podžigam)."
    },
    {
        "role": "assistant_3",
        "message": "Owca, prav nasprotno, Java je jezik prihodnosti, še posebej za velike sisteme. Če misliš po razširjenosti, mogoče, ampak to ne na račun moči jezika. Čeprav še tu bi sam bolj stavil na C#, zlasti ker mu drastično zvečujejo izrazno moč in bo tako zanimiv večim slojem programerjev.  ythona ne poznam dobro, zato ne vem, kaj točno ti pojmuješ pod metaprogramiranje. Kontroliranje kako nastajajo instance razreda, transformiranje objektov (zlasti funkcij), naknadno spreminjanje razredov (ki se odraža v vseh instancah), ..."
    },
    {
        "role": "assistant_5",
        "message": "Java ima razmeroma strmo krivuljo učenja (\"steep learning curve\"), to je povsem res. Poleg tega je dokaj popularna tudi pri odprtokodnikih, zato za praktično vsako področje obstaja n knjižnic, frameworkov ,ipd. Nekateri to štejemo kot prednost, marsikoga (predvsem začetnika) pa to zbega, vsaj v primerjavi z Microsoftovimi rešitvami, kjer običajno obstaja ena, uradna pot, ki je dodobra speglana in deluje brez povzročanja sivih las.  In Owca, Java se tudi razvija. Pred cca. dvema letoma je izšla verzija 1.5, ki je prinesla kar nekaj novosti, že omenjene annotatione, potem generike (parametrizirani tipi), varargs (variabilno št. argumentov v metodah), (ne)slavni autoboxing-unboxing, itd. Je pa res, da mnogi teh novosti sploh ne uporabljajo, vsaj zavestno ne. Enkrat letos poleti ali jeseni bo luč sveta ugledal Mustang (1.6), ki bo tudi prinesel precej novosti. Tako da zadeve ne stojijo na mestu. Moram tudi tpovedati, da so se s prihodom .NETa tudi pri SUNu zbudili, in imam občutek, da sedaj precej hitreje uvajajo novosti in spremembe."
    },
    {
        "role": "assistant_1",
        "message": "OK, fantje, malo dosti off-topic, a?  Nisem zelel flamewar-a, a bom odgovoril Sergiu: Me pa zanima, kaksni so tvoji kontraargumenti za take programske jezike, in kaj mislis, da je poglavitna prednost ROR.  Razlika je ze v tem da Java/PHP ni framework (se pravi skupek kode, ki nekomu olajsa repetative taske pri gradnji CMSja) temvec programski jezik. Zato tukaj primerjava ni ravno na mestu.  Ce pa nastejem nekaj prednosti RoR/Django frameworkov: - database design v programskem jeziku (ni potrebe po znanju SQL - vsaj na zacetku) - convention over configuration (pri programiranju se drzis nekih dogovorov, ki ti posledicno pomagajo do cistejse/manj kode, ker zna framework dosti stvari poenostavit) - sama sintaksa kode (ruby/python je cist drugace gledat kot php, katerega imam po 3h letih poln k**** debugiranja) - hiter adoption novih idej (AJAX, JS, object storage,...) - auto admin (recimo pri Djangu) - ...  Z JSP nimam izkusenj, tako da ne morem komentirat Javanskega web programiranja. Vse kar lahko komentiram je recimo E-Student, ki je IMHO perfect example zakaj NE uprabit Jave. Vem pa tudi, da recimo Prevoz.org prav super (baje) lavfa na Java-based CMS-ju.   Kar se pa Jave in C# tice... njihove kao \"RAD\" zmoznosti so tako precenjene, da sploh ne vem kje bi zacel."
    },
    {
        "role": "assistant_5",
        "message": "Ojoj, jebiveter, v Javi je napisanih najmanj 20 web frameworkov ... od takih, ki se zelo malo razlikujejo od običajnega JSP&servlet programiranja, do takih, kjer ti JSP-jev še povohati ni treba (sem že imel \"čast\" testirati tudi tak web framework, ki imitira običajno client-gui aplikacijo - to mislim iz stališča razvijalca). In ne boš verjel, nekje sem izbrskal tudi \"trails\", ki deloma posnema RoR (Ruby on Rails). Torej, kot sem omenil že zgoraj, n frameworkov, tako da se za vsak okus dobi nekaj ...  Eštudent ni neka referenca, s katero bi kar nasplošno ocenil celotno web programiranje v Javi. Oni so si, kolikor vem, izbrali neko Oraclovo zadevo (ja, Oracle ima več produktov za Javo) ... sploh pa je vsako ogrodje namenjeno predvsem lajšanju razvoja in ne bi smelo vplivati na \"end-user experience\". Kar hočem povedati je to, da mora web aplikacija ustrezati zahtevam naročnika, ne glede na to, ali je spisana s tem ali onim ogrodjem/prog. jezikom."
    },
    {
        "role": "assistant_1",
        "message": "Kopernik, a sem kje rekel, da ni web frameworkov napisanih v Javi?  Meni osebno pac Java ni pretirano vsec in mi na kraj pameti ne pade, da grem pisat web app v Javi. Kar pa ne pomeni, da se ne bo 101 drugi web developer odlocil zanjo. Sure, vse je odvisno kaj narocnik hoce - kar sicer se sam ne ve kaj hoce ampak postavi pogoj: \"mora bit spisano v Javi/PHP\", zato ker je nekje slisal, da je Java/PHP ql in oh in sploh. Nobeden pa se ne zamisli in vprasa ali je to res najboljsa/najhitrejsa/najprimernejsa resitev za dano nalogo. No, taksne so moje izkusnje.  Ocitno pa sem dosegel point - folk je ugotovu, da PHP NI EDINI! :)"
    },
    {
        "role": "assistant_0",
        "message": "> Ocitno pa sem dosegel point - folk je ugotovu, da PHP NI EDINI! :)  Res je. Hvala.  Me pa zanima kako je s podporo ROR in Djangota po raznih serverjih?"
    },
    {
        "role": "assistant_3",
        "message": "Bolj švoh kot ne, ampak situacija se izbolšuje.   Za TurboGears (za kakšno zanimivo stvar v TG, lahko tudi mene pocukate za rokav)."
    }
]